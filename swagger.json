{
  "openapi": "3.0.1",
  "info": {
    "title": "REST API documentation",
    "description": "A voting system for deciding where to have lunch. Course TopJava</a> (Graduation project solution)",
    "contact": {
      "name": "Andrey Kozlov",
      "email": "avgur33@gmail.com"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "AdminUserController",
      "description": "Controller for manipulating with User. Only for Admin."
    },
    {
      "name": "ProfileController",
      "description": "Controller for registration User."
    }
  ],
  "paths": {
    "/api/root/vote": {
      "put": {
        "tags": [
          "RootController"
        ],
        "summary": "Update vote for authenticated user",
        "description": "if user not voting yet - create vote",
        "operationId": "update",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "query",
            "description": "The id of restaurant.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "post": {
        "tags": [
          "RootController"
        ],
        "summary": "Create vote for authenticated user",
        "operationId": "createVoteWithLocation",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "query",
            "description": "The id of restaurant.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vote"
                }
              }
            }
          }
        }
      }
    },
    "/api/profile": {
      "get": {
        "tags": [
          "ProfileController"
        ],
        "summary": "Get authorized user",
        "operationId": "get_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProfileController"
        ],
        "summary": "Update authorized user",
        "operationId": "update_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "post": {
        "tags": [
          "ProfileController"
        ],
        "summary": "Create user",
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProfileController"
        ],
        "summary": "Delete authorized user",
        "operationId": "delete",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/admin/users/{id}": {
      "get": {
        "tags": [
          "AdminUserController"
        ],
        "summary": "Get user by id",
        "operationId": "get_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of User that needs to be fetched. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminUserController"
        ],
        "summary": "Update user",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of User that needs to be updated. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "delete": {
        "tags": [
          "AdminUserController"
        ],
        "summary": "Delete user by id",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of User that needs to be deleted. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "patch": {
        "tags": [
          "AdminUserController"
        ],
        "summary": "Set enable or disable status for user",
        "operationId": "enable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of User that needs to be updated. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "enable or disable status for user",
            "required": true,
            "content": {
              "*/*": {
                "example": true
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/admin/restaurants/{restaurantId}/dishes/{id}": {
      "get": {
        "tags": [
          "AdminDishController"
        ],
        "summary": "Get dish for the restaurant(restaurantId) by id",
        "operationId": "get_4",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of dish that needs to be fetched. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dish for the restaurant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dish"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminDishController"
        ],
        "summary": "Update dish",
        "operationId": "update_3",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of dish that needs to be updated. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dish"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Created dish for the restaurant"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminDishController"
        ],
        "summary": "Delete dish with ID",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of dish that needs to be deleted. Use 10 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 10
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The dish was deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/restaurants/{id}": {
      "get": {
        "tags": [
          "AdminRestaurantController"
        ],
        "summary": "Get restaurant by restaurant id",
        "operationId": "get_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of restaurant that needs to be fetched. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The restaurant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "423": {
            "description": "Locked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminRestaurantController"
        ],
        "summary": "Update restaurant",
        "operationId": "update_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of restaurant that needs to be deleted. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Restaurant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Update the restaurant"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminRestaurantController"
        ],
        "summary": "Delete restaurant",
        "operationId": "delete_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of restaurant that needs to be deleted. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users": {
      "get": {
        "tags": [
          "AdminUserController"
        ],
        "summary": "Get all users",
        "description": "Sort.Direction.ASC by name and email",
        "operationId": "getAll",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminUserController"
        ],
        "summary": "Create user",
        "operationId": "createWithLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/restaurants": {
      "get": {
        "tags": [
          "AdminRestaurantController"
        ],
        "summary": "Get all restaurants",
        "operationId": "getAll_1",
        "responses": {
          "200": {
            "description": "List of restaurants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Restaurant"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "AdminRestaurantController"
        ],
        "summary": "Create restaurant",
        "operationId": "creatWithLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Restaurant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create the restaurant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurant"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/restaurants/{restaurantId}/menu": {
      "get": {
        "tags": [
          "AdminMenuController"
        ],
        "summary": "Get All menus for the restaurant",
        "description": "You can use filter between Start date and End Date inclusive",
        "operationId": "getAll_2",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format yyyy-MM-dd.",
            "required": false,
            "content": {
              "*/*": {
                "example": "2020-02-21"
              }
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format yyyy-MM-dd.",
            "required": false,
            "content": {
              "*/*": {
                "example": "2022-02-21"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Menu"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminMenuController"
        ],
        "summary": "Create menu for the restaurant",
        "description": "Number of dishes must be between 2 and 5",
        "operationId": "creatWithLocation_1",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 3 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 3
              }
            }
          },
          {
            "name": "forDate",
            "in": "query",
            "description": "For date. Format yyyy-MM-dd.",
            "required": false,
            "content": {
              "*/*": {
                "example": "2022-02-21"
              }
            }
          },
          {
            "name": "dishes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/restaurants/{restaurantId}/dishes": {
      "get": {
        "tags": [
          "AdminDishController"
        ],
        "summary": "Get dishes for restaurant",
        "operationId": "getAll_3",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The dishes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dish"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminDishController"
        ],
        "summary": "Create dish for restaurant",
        "operationId": "creatWithLocation_2",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dish"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created dish for the restaurant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dish"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "423": {
            "description": "Locked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/restaurants/{restaurantId}/menu/{id}": {
      "get": {
        "tags": [
          "AdminMenuController"
        ],
        "summary": "Get menu for the restaurant",
        "operationId": "get_3",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of menu which needs to be deleted. Use 4 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 4
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminMenuController"
        ],
        "summary": "Delete menu for the restaurant",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 2 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 2
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of menu which needs to be deleted. Use 5 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 5
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "patch": {
        "tags": [
          "AdminMenuController"
        ],
        "summary": "Patch menu for the restaurant",
        "description": "You can update menu only for today. For test use 1,2,3 ids for dishes.Number of dishes must be between 2 and 5. Dish must be in db.",
        "operationId": "update_5",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of menu which needs to be updated. Use 4 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 4
              }
            }
          },
          {
            "name": "dishes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/root": {
      "get": {
        "tags": [
          "RootController"
        ],
        "summary": "Get menus and restaurants for today vote",
        "operationId": "get",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number ",
            "required": true,
            "content": {
              "*/*": {
                "example": 0
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size ",
            "required": true,
            "content": {
              "*/*": {
                "example": 10
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuTo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/root/vote/user/history": {
      "get": {
        "tags": [
          "RootController"
        ],
        "summary": "Get users history of voting",
        "operationId": "getAllVotes",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format yyyy-MM-dd.",
            "required": false,
            "content": {
              "*/*": {
                "example": "2020-02-21"
              }
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format yyyy-MM-dd.",
            "required": false,
            "content": {
              "*/*": {
                "example": "2022-02-21"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoteTo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/root/vote/result": {
      "get": {
        "tags": [
          "RootController"
        ],
        "summary": "Get voting result for today",
        "operationId": "getResult",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestaurantTo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/root/vote/result/history": {
      "get": {
        "tags": [
          "RootController"
        ],
        "summary": "Get history of voting",
        "operationId": "getResultHistory",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format yyyy-MM-dd.",
            "required": false,
            "content": {
              "*/*": {
                "example": "2020-02-21"
              }
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format yyyy-MM-dd.",
            "required": false,
            "content": {
              "*/*": {
                "example": "2022-02-21"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestaurantTo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/root/vote/by": {
      "get": {
        "tags": [
          "RootController"
        ],
        "summary": "Get today vote for authenticated user",
        "operationId": "getVote",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoteTo"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/by": {
      "get": {
        "tags": [
          "AdminUserController"
        ],
        "summary": "Get user by email",
        "operationId": "getByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email of User that needs to be fetched.",
            "required": true,
            "content": {
              "*/*": {
                "example": "admin@gmail.com"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/restaurants/{restaurantId}/menu/by": {
      "get": {
        "tags": [
          "AdminMenuController"
        ],
        "summary": "Get menu for the restaurant for today by restaurantId",
        "operationId": "getBy",
        "parameters": [
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The id of restaurant. Use 1 for testing.",
            "required": true,
            "content": {
              "*/*": {
                "example": 1
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserTo": {
        "required": [
          "email",
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "email": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "password": {
            "maxLength": 32,
            "minLength": 5,
            "type": "string"
          }
        }
      },
      "User": {
        "required": [
          "email",
          "name",
          "password",
          "registered"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID for new entity must be null",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string",
            "description": "name",
            "example": "newName"
          },
          "email": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "example": "newmail@gmail.com"
          },
          "password": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string",
            "writeOnly": true,
            "example": "12345"
          },
          "enabled": {
            "type": "boolean",
            "description": "users status",
            "example": true
          },
          "registered": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "USER",
                "ADMIN"
              ]
            }
          }
        },
        "description": "Entity User"
      },
      "ErrorInfo": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Dish": {
        "required": [
          "name",
          "price"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID for new entity must be null",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string",
            "description": "name",
            "example": "newName"
          },
          "price": {
            "type": "integer",
            "description": "min = 10",
            "format": "int32",
            "example": 100
          }
        }
      },
      "Restaurant": {
        "required": [
          "location",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID for new entity must be null",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string",
            "description": "name",
            "example": "newName"
          },
          "location": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string",
            "description": "name",
            "example": "Moscow City"
          }
        }
      },
      "LocalTime": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32"
          },
          "nano": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Vote": {
        "required": [
          "regDate",
          "regTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID for new entity must be null",
            "format": "int32"
          },
          "regDate": {
            "type": "string",
            "format": "date"
          },
          "regTime": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "Menu": {
        "required": [
          "forDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID for new entity must be null",
            "format": "int32"
          },
          "forDate": {
            "type": "string",
            "description": "For this date",
            "format": "date",
            "example": "2020-02-20"
          },
          "dishes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dish"
            }
          }
        }
      },
      "MenuTo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "dishes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "VoteTo": {
        "required": [
          "regDate",
          "regTime",
          "restaurantLocation",
          "restaurantName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "regDate": {
            "type": "string",
            "format": "date"
          },
          "regTime": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "restaurantName": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "restaurantLocation": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          }
        }
      },
      "RestaurantTo": {
        "required": [
          "location",
          "name",
          "votes"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "location": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string"
          },
          "votes": {
            "type": "integer",
            "format": "int32"
          },
          "votesHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}